with recursive fun(n) as
(
select 1
union all
select n+1 from fun where n<10
)
select * from fun;





SELECT SUBSTR(MY_MODULE_LIST,INSTR(MY_MODULE_LIST,',',1,ROWNUM)+1,(INSTR(MY_MODULE_LIST,',',1,ROWNUM+1)-INSTR(MY_MODULE_LIST,',',1,ROWNUM))-1)MODULE_ID
FROM (SELECT (CASE WHEN IN_MODULE_LIST IS NOT NULL THEN ','||IN_MODULE_LIST||',' ELSE '' END) MY_MODULE_LIST /*FROM DUAL*/)
CONNECT BY LEVEL <(LENGTH(MY_MODULE_LIST)-LENGTH(REPLACE(MY_MODULE_LIST,',','')))


SELECT TO_NUMBER(SUBSTR(MY_CUSTOMER_TYPE,INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM)+1,(INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM+1)-INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM))-1))CUST_ID
FROM (SELECT ','||IN_CUSTOMER_TYPE||',' MY_CUSTOMER_TYPE /*FROM DUAL*/)
CONNECT BY LEVEL <(LENGTH(MY_CUSTOMER_TYPE)-LENGTH(REPLACE(MY_CUSTOMER_TYPE,',','')))

select CUST_ID from (
	with recursive fun as (rownum) as
	(
		select 1 rownum,TO_NUMBER(SUBSTR(MY_CUSTOMER_TYPE,INSTR(MY_CUSTOMER_TYPE,',',1,0)+1,(INSTR(MY_CUSTOMER_TYPE,',',1,0+1)-INSTR(MY_CUSTOMER_TYPE,',',1,0))-1))CUST_ID
		from (SELECT ','||IN_CUSTOMER_TYPE||',' MY_CUSTOMER_TYPE )tbl
		union all
		select rownum+1,TO_NUMBER(SUBSTR(MY_CUSTOMER_TYPE,INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM)+1,(INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM+1)-INSTR(MY_CUSTOMER_TYPE,',',1,ROWNUM))-1))CUST_ID
		from fun where rownum < (LENGTH(MY_CUSTOMER_TYPE)-LENGTH(REPLACE(MY_CUSTOMER_TYPE,',','')))
	) select CUST_ID from fun where rownum !=1
)tbl


SELECT SUBSTR(MY_REGION_TYPE,INSTR(MY_REGION_TYPE,',',1,ROWNUM)+1,(INSTR(MY_REGION_TYPE,',',1,ROWNUM+1)-INSTR(MY_REGION_TYPE,',',1,ROWNUM))-1)REGN
 FROM (SELECT ','||IN_REGION_TYPE||',' MY_REGION_TYPE /*FROM DUAL*/)
CONNECT BY LEVEL <(LENGTH(MY_REGION_TYPE)-LENGTH(REPLACE(MY_REGION_TYPE,',','')))





with recursive fun (rownum) as
(
	select 1 rownum,SUBSTR(MY_MODULE_LIST,INSTR(MY_MODULE_LIST,',',1,0)+1,(INSTR(MY_MODULE_LIST,',',1,0+1)-INSTR(MY_MODULE_LIST,',',1,0))-1)MODULE_ID
	from (Select (Case When IN_MODULE_LIST Is Not Null Then ','||IN_MODULE_LIST||',' Else '' End) ) tbl
	union all
	select rownum+1, SUBSTR(MY_MODULE_LIST,INSTR(MY_MODULE_LIST,',',1,rownum)+1,(INSTR(MY_MODULE_LIST,',',1,rownum+1)-INSTR(MY_MODULE_LIST,',',1,rownum))-1)MODULE_ID
	from fun
	where rownum < Length(MY_MODULE_LIST)-Length(Replace(MY_MODULE_LIST,',',''))
)
select MODULE_ID from fun
where rownum!=1;











--oracle
select  SUBSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum)+1,(INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum+1)-INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum))-1)MODULE_ID
From (Select (Case When 'APR,ASTBUY,ASTBUYM,AUC,AUTO,AUTOOEM' Is Not Null Then ','||'APR,ASTBUY,ASTBUYM,AUC,AUTO,AUTOOEM'||',' Else '' End) from dual ) 
connect by level <(Length('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY')-Length(Replace('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',','')))


--pg
with recursive fun (rownum) as
(
select 1 rownum,SUBSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,0)+1,(INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,0+1)-INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,0))-1)MODULE_ID
from (Select (Case When 'APR,ASTBUY,ASTBUYM,AUC,AUTO,AUTOOEM' Is Not Null Then ','||'APR,ASTBUY,ASTBUYM,AUC,AUTO,AUTOOEM'||',' Else '' End) ) tbl
union all
select rownum+1, SUBSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum)+1,(INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum+1)-INSTR('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',1,rownum))-1)MODULE_ID
from fun
where rownum < Length('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY')-Length(Replace('AGGRPCAT,AGRO,ANDROID,APR,ASTBUY',',',''))
)
select * from fun
where rownum!=1;

