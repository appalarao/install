CREATE OR REPLACE TRIGGER "INDIAMART"."TRG_ETO_UNSOLD_LEAD_MAIL" 
BEFORE INSERT OR UPDATE ON ETO_UNSOLD_LEAD_MAIL
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		BEGIN
			IF :NEW.GLUSR_USR_ID IS NOT NULL THEN
				INSERT INTO ETO_UNSOLD_LEAD_INTR_DETAILS (ETO_UNSOLD_LEAD_SUPP_ID,ETO_UNSOLD_LEAD_SUPP_COUNT) VALUES(:NEW.GLUSR_USR_ID,1);
			END IF;
		EXCEPTION WHEN OTHERS THEN
			UPDATE ETO_UNSOLD_LEAD_INTR_DETAILS SET ETO_UNSOLD_LEAD_SUPP_COUNT=ETO_UNSOLD_LEAD_SUPP_COUNT+1 WHERE ETO_UNSOLD_LEAD_SUPP_ID=:NEW.GLUSR_USR_ID;
		END;
	END IF;
END;


CREATE SEQUENCE SEQ_ETO_UNSOLD_LEADS_MW
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 363190866;

create or replace function fn_TRG_ETO_UNSOLD_LEADS() returns trigger as 
$body$
DECLARE
	MY_ETO_REJECTION_MASTER_ID numeric(10);
BEGIN
	IF TG_OP = 'INSERT' THEN
		select nextval('SEQ_ETO_UNSOLD_LEADS_MW') into new.ETO_UNSOLD_LEADS_ID;
	END IF;
	IF TG_OP = 'UPDATE' THEN
		NEW.ETO_UNSOLD_LEADS_ID := OLD.ETO_UNSOLD_LEADS_ID;
	END IF;
--	retturn null;
	return new;
END;
$body$
language plpgsql;

CREATE TRIGGER TRG_ETO_UNSOLD_LEADS_MW1
BEFORE insert or update 
ON ETO_UNSOLD_LEADS
FOR EACH ROW
EXECUTE PROCEDURE fn_TRG_ETO_UNSOLD_LEADS();
